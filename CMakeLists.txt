#版本限定 
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
# 项目名称 
PROJECT(myproject)
#设置编译器选项：O3优化，显示所有警告
#SET(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
add_definitions(-std=c++11)
#find opencv library
#FIND_PACKAGE(OpenCV REQUIRED)
#SET(Boost_USE_STATIC_LIBS OFF)
#SET(Boost_USE_MULTITHREAD ON)
#find_package(Boost REQUIRED COMPONENTS system thread regex)
#find_package(Boost REQUIRED)
# 定义头文件的路径变量
SET(INCLUDE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/include)
MESSAGE(STATUS "Include Path,${INCLUDE_PATH}")


# 定义库文件路径
SET(LIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib)
MESSAGE(STATUS "Library Path,${LIB_PATH}")


# 定义源文件路径变量
SET(SOURCE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/src)
MESSAGE(STATUS "Source Path,${SOURCE_PATH}")

# 包含头文件搜索路径

INCLUDE_DIRECTORIES(${INCLUDE_PATH})

# 包含库搜索路径
LINK_DIRECTORIES(${LIB_PATH})

# 定义待链接库名字
# 链接静态库
#SET(LIBS_LIST libmylib.a)

# 链接动态库
#SET(LIBS_LIST libmylib.so) 
SET(LIBS_LIST)
# 添加源文件路径下所有源文件存放到变量中(*.c && *.cpp)
AUX_SOURCE_DIRECTORY(${SOURCE_PATH} SRC_LIST)
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/build)

# 设置生成可执行文件的名称
SET(EXECUTABLE_FILE_NAME test)

# 生成可执行文件
ADD_EXECUTABLE(${EXECUTABLE_FILE_NAME} ${SRC_LIST})
#ADD_LIBRARY(${EXECUTABLE_FILE_NAME} SHARED ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp)
#message(STATUS "${Boost_LIBS}")
# 设置可执行文件链接的库名称
TARGET_LINK_LIBRARIES(${EXECUTABLE_FILE_NAME} ${LIBS_LIST})
#TARGET_LINK_LIBRARIES(${EXECUTABLE_FILE_NAME} ${OpenCV_LIBS})
#TARGET_LINK_LIBRARIES(${EXECUTABLE_FILE_NAME} ${Boost_SYSTEM_LIBRARY} ${Boost_THREAD_LIBRARY} ${Boost_REGEX_LIBRARY} pthread)
SET(CMAKE_BUILD_TYPE "Debug")  
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g2 -ggdb")  
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
